from typing import Protocol, Iterable, Optional, Dict, Any, List

class FGEAdapter(Protocol):
    def listar_planos_presc_sem_974(self) -> Iterable[Dict[str, Any]]: ...
    def obter_saldo_total(self, numero_plano: str) -> float: ...
    def plano_tem_grde(self, numero_plano: str) -> bool: ...
    def listar_debitos_confessados(self, numero_plano: str) -> Iterable[Dict[str, Any]]: ...
    def consultar_notificado(self, inscricao: str, competencia: str) -> bool: ...
    def executar_rescisao(self, numero_plano: str) -> bool: ...

class SirepAdapter(Protocol):
    def listar_sem_tratamento(self) -> List[Dict[str, Any]]: ...
    def carga_complementar(self, linhas: List[Dict[str, Any]]) -> None: ...
    def atualizar_plano(self, numero_plano: str, campos: Dict[str, Any]) -> None: ...

class CEFGDAdapter(Protocol):
    def plano_e_especial(self, numero_plano: str) -> bool: ...

class CNSAdapter(Protocol):
    def enviar_comunicacao(self, inscricoes: list[str], titulo: str, corpo: str) -> Dict[str,str]: ...

class PIGAdapter(Protocol):
    def pesquisar_guias(self, inscricao: str, competencia_ini: str, competencia_fim: str, data_ini: str) -> list[Dict[str,Any]]: ...
    def lancar_guia(self, registro: Dict[str, Any]) -> bool: ...