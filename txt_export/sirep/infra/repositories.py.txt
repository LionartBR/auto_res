=== SOURCE: sirep/infra/repositories.py ===
from typing import Iterable, Optional, Sequence
from sqlalchemy.orm import Session
from sqlalchemy import select, update
from sirep.domain.models import Plan, Event, JobRun, DiscardedPlan
from sirep.domain.enums import PlanStatus, Step

class PlanRepository:
    def __init__(self, db: Session): self.db = db
    def get_by_numero(self, numero_plano: str) -> Optional[Plan]:
        return self.db.scalar(select(Plan).where(Plan.numero_plano==numero_plano))
    def upsert(self, numero_plano: str, **fields) -> Plan:
        plan = self.get_by_numero(numero_plano)
        if not plan:
            plan = Plan(numero_plano=numero_plano, **fields)
            self.db.add(plan)
        else:
            for k,v in fields.items(): setattr(plan, k, v)
        self.db.flush()
        return plan
    def list_by_status(self, status: PlanStatus) -> Sequence[Plan]:
        return self.db.scalars(select(Plan).where(Plan.status==status)).all()
    def set_status(self, plan: Plan, status: PlanStatus): plan.status = status

class EventRepository:
    def __init__(self, db: Session): self.db = db
    def log(self, plan_id: int, step: Step, message: str, level: str="INFO"):
        self.db.add(Event(plan_id=plan_id, step=step, message=message, level=level))

class JobRunRepository:
    def __init__(self, db: Session): self.db = db
    def start(self, step: Step, input_hash: str) -> JobRun:
        jr = JobRun(step=step, input_hash=input_hash)
        self.db.add(jr); self.db.flush(); return jr
    def finish(self, job: JobRun, status: str, info: str|None=None):
        job.status = status; job.info = info

class OccurrenceRepository:
    def __init__(self, db: Session): self.db = db

    def add(self, *, numero_plano: str, situacao: str, cnpj: str, tipo: str, saldo: float, dt_situacao_atual):
        row = DiscardedPlan(
            numero_plano=numero_plano, situacao=situacao, cnpj=cnpj,
            tipo=tipo, saldo=saldo, dt_situacao_atual=dt_situacao_atual
        )
        self.db.add(row)
        return row

    def paginate(self, *, pagina: int, tamanho: int):
        q = self.db.query(DiscardedPlan).order_by(DiscardedPlan.id.desc())
        total = q.count()
        rows = q.offset((pagina-1)*tamanho).limit(tamanho).all()
        return rows, total